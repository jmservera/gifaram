schemaVersion: 1.0.0
name: org.servezas.gifaram
description: ""
version: 0.9.1
registry: jmaksdemos.azurecr.io
images:
  gif2t:
    name: gif2t
    description: ""
    imagetype: docker
    repository: jmaksdemos.azurecr.io/azure-blob-to-telegram
    tag: ""
    digest: sha256:90de6ee872db6545d9ae6a59a99e7a061c8a7c61a28008a879a0bdea16f1a629
mixins:
- exec
- helm3
install:
- helm3:
    name: org.servezas.gifaram
    description: ""
    chart: ./gifaram
    set: {}
uninstall:
- exec:
    description: Not implemented
    command: echo 'Not implemented'
parameters: []
custom:
  deploymentrestrictions:
    mincores: 0
    minnodes: 0
    minkubernetesversion: ""
    requiregpunodes: false
    openshiftallowed: false
    nodetype: ""
    newclusterrequired: false
  clusterarmtemplate: 
  uidefinition: 
  helmchart: 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
  extensionregistrationparameters: eyJkZWZhdWx0U2NvcGUiOiJjbHVzdGVyIiwibmFtZXNwYWNlIjoiZ2lmYXJhbSJ9
